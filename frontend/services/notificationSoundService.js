/**
 * Servi√ßo de √°udio para notifica√ß√µes
 * Gerencia a reprodu√ß√£o de sons de notifica√ß√£o com controle de batch
 */
class NotificationSoundService {
  constructor() {
    this.audio = null;
    this.soundPath = '/assets/sounds/notification.mp3';
    this.isPlaying = false;
    this.lastPlayTime = 0;
    this.minIntervalBetweenSounds = 2000; // 2 segundos m√≠nimo entre sons
    this.soundEnabled = true;
    this.volume = 0.5;
    
    this.initializeAudio();
    this.loadSettings();
  }

  /**
   * Inicializar objeto de √°udio
   */
  initializeAudio() {
    try {
      this.audio = new Audio(this.soundPath);
      this.audio.volume = this.volume;
      this.audio.preload = 'auto';
      
      // Event listeners para controle
      this.audio.addEventListener('ended', () => {
        this.isPlaying = false;
      });
      
      this.audio.addEventListener('error', (error) => {
        console.warn('‚ö†Ô∏è Erro ao carregar som de notifica√ß√£o:', error);
      });
      
      console.log('üîä Servi√ßo de som de notifica√ß√£o inicializado');
    } catch (error) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel inicializar √°udio:', error);
    }
  }

  /**
   * Carregar configura√ß√µes do localStorage
   */
  loadSettings() {
    try {
      const soundEnabled = localStorage.getItem('notification_sound_enabled');
      const volume = localStorage.getItem('notification_sound_volume');
      
      if (soundEnabled !== null) {
        this.soundEnabled = soundEnabled === 'true';
      }
      
      if (volume !== null) {
        this.volume = parseFloat(volume);
        if (this.audio) {
          this.audio.volume = this.volume;
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao carregar configura√ß√µes de som:', error);
    }
  }

  /**
   * Salvar configura√ß√µes no localStorage
   */
  saveSettings() {
    try {
      localStorage.setItem('notification_sound_enabled', this.soundEnabled.toString());
      localStorage.setItem('notification_sound_volume', this.volume.toString());
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao salvar configura√ß√µes de som:', error);
    }
  }

  /**
   * Tocar som de notifica√ß√£o (apenas 1x por batch)
   * @param {number} notificationCount - N√∫mero de notifica√ß√µes no batch
   */
  playNotificationSound(notificationCount = 1) {
    // Verificar se est√° habilitado
    if (!this.soundEnabled) {
      console.log('üîá Som de notifica√ß√£o desabilitado');
      return false;
    }

    // Verificar se j√° est√° tocando
    if (this.isPlaying) {
      console.log('üîä Som j√° est√° tocando, ignorando...');
      return false;
    }

    // Verificar intervalo m√≠nimo
    const now = Date.now();
    if (now - this.lastPlayTime < this.minIntervalBetweenSounds) {
      console.log('üîä Muito pr√≥ximo do √∫ltimo som, ignorando...');
      return false;
    }

    // Verificar se √°udio est√° dispon√≠vel
    if (!this.audio) {
      console.warn('‚ö†Ô∏è √Åudio n√£o dispon√≠vel');
      return false;
    }

    try {
      // Resetar √°udio se necess√°rio
      this.audio.currentTime = 0;
      
      // Tocar som
      const playPromise = this.audio.play();
      
      if (playPromise !== undefined) {
        playPromise
          .then(() => {
            this.isPlaying = true;
            this.lastPlayTime = now;
            console.log(`üîä Som de notifica√ß√£o tocado para ${notificationCount} notifica√ß√£o(√µes)`);
          })
          .catch(error => {
            console.warn('‚ö†Ô∏è Erro ao tocar som:', error);
            this.isPlaying = false;
          });
      }
      
      return true;
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao reproduzir som de notifica√ß√£o:', error);
      return false;
    }
  }

  /**
   * Habilitar/desabilitar som
   * @param {boolean} enabled
   */
  setSoundEnabled(enabled) {
    this.soundEnabled = !!enabled;
    this.saveSettings();
    console.log(`üîä Som de notifica√ß√£o ${enabled ? 'habilitado' : 'desabilitado'}`);
  }

  /**
   * Definir volume (0.0 a 1.0)
   * @param {number} volume
   */
  setVolume(volume) {
    this.volume = Math.max(0, Math.min(1, parseFloat(volume) || 0.5));
    
    if (this.audio) {
      this.audio.volume = this.volume;
    }
    
    this.saveSettings();
    console.log(`üîä Volume definido para ${Math.round(this.volume * 100)}%`);
  }

  /**
   * Testar som
   */
  testSound() {
    console.log('üß™ Testando som de notifica√ß√£o...');
    return this.playNotificationSound(1);
  }

  /**
   * Obter configura√ß√µes atuais
   */
  getSettings() {
    return {
      soundEnabled: this.soundEnabled,
      volume: this.volume,
      isPlaying: this.isPlaying
    };
  }

  /**
   * Verificar se o navegador suporta √°udio
   */
  static isAudioSupported() {
    return typeof Audio !== 'undefined';
  }
}

// Inst√¢ncia singleton
let notificationSoundService = null;

/**
 * Obter inst√¢ncia do servi√ßo de som
 */
export const getNotificationSoundService = () => {
  if (!notificationSoundService && NotificationSoundService.isAudioSupported()) {
    notificationSoundService = new NotificationSoundService();
  }
  return notificationSoundService;
};

export default NotificationSoundService;