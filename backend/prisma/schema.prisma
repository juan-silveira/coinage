// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Client Model
model Client {
  id             String    @id @default(uuid()) @db.Uuid
  name           String    @db.VarChar(255)
  alias          String?   @unique @db.VarChar(50)
  isActive       Boolean   @default(true) @map("is_active")
  rateLimit      Json      @default("{\"requestsPerMinute\": 100, \"requestsPerHour\": 1000, \"requestsPerDay\": 10000}") @map("rate_limit") @db.JsonB
  lastActivityAt DateTime? @map("last_activity_at") @db.Timestamptz
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  requestLogs     RequestLog[]
  transactions    Transaction[]
  webhooks        Webhook[]
  documents       Document[]
  clientBrandings ClientBranding[]
  userClients     UserClient[]

  @@map("clients")
  @@index([isActive], map: "idx_clients_active")
  @@index([lastActivityAt], map: "idx_clients_last_activity")
  @@index([alias], map: "idx_clients_alias")
}

// User Model - Agora sem clientId fixo, suporte a m√∫ltiplos clientes
model User {
  id                     String   @id @default(uuid()) @db.Uuid
  name                   String   @db.VarChar(255)
  email                  String   @unique @db.VarChar(255)
  cpf                    String   @unique @db.VarChar(14)
  phone                  String?  @db.VarChar(20)
  birthDate              DateTime? @map("birth_date") @db.Date
  publicKey              String   @map("public_key") @db.Text
  privateKey             String   @map("private_key") @db.Text
  password               String   @db.VarChar(255)
  passwordChangedAt      DateTime? @map("password_changed_at") @db.Timestamptz
  isFirstAccess          Boolean  @default(true) @map("is_first_access")
  sessionToken           String?  @unique @map("session_token") @db.VarChar(255)
  sessionExpiresAt       DateTime? @map("session_expires_at") @db.Timestamptz
  sessionTimeout         Int      @default(600) @map("session_timeout")
  globalRole             UserRole @default(USER) @map("global_role")
  isActive               Boolean  @default(true) @map("is_active")
  userPlan               UserPlan @default(BASIC) @map("user_plan")
  metadata               Json?    @db.JsonB
  lastActivityAt         DateTime? @map("last_activity_at") @db.Timestamptz
  createdAt              DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt              DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  apiKeys             ApiKey[]
  transactions        Transaction[]
  requestLogs         RequestLog[]
  userClients         UserClient[]
  userTwoFactors      UserTwoFactor[]
  requestedUserClients UserClient[]   @relation("UserClientRequester")
  approvedUserClients UserClient[]    @relation("UserClientApprover")
  deployedBrandings   ClientBranding[] @relation("ClientBrandingDeployer")
  notifications       Notification[]
  earnings            Earnings[]

  @@map("users")
  @@index([email], map: "idx_users_email")
  @@index([cpf], map: "idx_users_cpf")
  @@index([globalRole], map: "idx_users_global_role")
  @@index([isActive], map: "idx_users_active")
  @@index([lastActivityAt], map: "idx_users_last_activity")
  @@index([userPlan], map: "idx_users_user_plan")
}

// API Key Model
model ApiKey {
  id          String    @id @default(uuid()) @db.Uuid
  key         String    @unique @db.VarChar(64)
  keyHash     String    @unique @map("key_hash") @db.VarChar(255)
  name        String    @db.VarChar(100)
  description String?   @db.Text
  isActive    Boolean   @default(true) @map("is_active")
  expiresAt   DateTime? @map("expires_at") @db.Timestamptz
  lastUsedAt  DateTime? @map("last_used_at") @db.Timestamptz
  permissions Json?     @db.JsonB
  userId      String    @map("user_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("api_keys")
}

// Transaction Model
model Transaction {
  id               String            @id @default(uuid()) @db.Uuid
  clientId         String            @map("client_id") @db.Uuid
  userId           String?           @map("user_id") @db.Uuid
  userClientId     String?           @map("user_client_id") @db.Uuid
  requestLogId     String?           @map("request_log_id") @db.Uuid
  contractId       String?           @map("contract_id") @db.Uuid
  network          Network
  transactionType  TransactionType   @map("transaction_type")
  status           TransactionStatus @default(pending)
  txHash           String?           @unique @map("tx_hash") @db.VarChar(66)
  blockNumber      BigInt?           @map("block_number")
  fromAddress      String?           @map("from_address") @db.VarChar(42)
  toAddress        String?           @map("to_address") @db.VarChar(42)
  value            Decimal?          @db.Decimal(65, 0)
  gasPrice         Decimal?          @map("gas_price") @db.Decimal(65, 0)
  gasLimit         BigInt?           @map("gas_limit")
  gasUsed          BigInt?           @map("gas_used")
  nonce            Int?
  data             String?           @db.Text
  functionName     String?           @map("function_name") @db.VarChar(255)
  functionParams   Json?             @map("function_params") @db.JsonB
  receipt          Json?             @db.JsonB
  error            Json?             @db.JsonB
  confirmations    Int?              @default(0)
  estimatedGas     BigInt?           @map("estimated_gas")
  actualGasCost    Decimal?          @map("actual_gas_cost") @db.Decimal(65, 0)
  submittedAt      DateTime?         @map("submitted_at") @db.Timestamptz
  confirmedAt      DateTime?         @map("confirmed_at") @db.Timestamptz
  failedAt         DateTime?         @map("failed_at") @db.Timestamptz
  metadata         Json?             @db.JsonB
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime          @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  client       Client         @relation(fields: [clientId], references: [id])
  user         User?          @relation(fields: [userId], references: [id])
  userClient   UserClient?    @relation(fields: [userClientId], references: [id])
  requestLog   RequestLog?    @relation(fields: [requestLogId], references: [id])
  contract     SmartContract? @relation(fields: [contractId], references: [id])

  @@map("transactions")
  @@index([clientId], map: "idx_transactions_client_id")
  @@index([txHash], map: "idx_transactions_tx_hash")
  @@index([status], map: "idx_transactions_status")
  @@index([network], map: "idx_transactions_network")
  @@index([transactionType], map: "idx_transactions_type")
  @@index([fromAddress], map: "idx_transactions_from_address")
  @@index([toAddress], map: "idx_transactions_to_address")
  @@index([blockNumber], map: "idx_transactions_block_number")
  @@index([createdAt], map: "idx_transactions_created_at")
  @@index([confirmedAt], map: "idx_transactions_confirmed_at")
  @@index([clientId, status], map: "idx_transactions_client_status")
  @@index([userId], map: "idx_transactions_user_id")
  @@index([userClientId], map: "idx_transactions_user_client_id")
  @@index([network, status], map: "idx_transactions_network_status")
}

// Smart Contract Model
model SmartContract {
  id          String    @id @default(uuid()) @db.Uuid
  clientId    String    @map("client_id") @db.Uuid
  name        String    @db.VarChar(255)
  address     String    @unique @db.VarChar(42)
  network     Network
  abi         Json      @db.JsonB
  bytecode    String?   @db.Text
  isActive    Boolean   @default(true) @map("is_active")
  metadata    Json?     @db.JsonB
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  transactions Transaction[]

  @@map("smart_contracts")
  @@index([address], map: "idx_smart_contracts_address")
  @@index([network], map: "idx_smart_contracts_network")
  @@index([isActive], map: "idx_smart_contracts_active")
}

// Stake Model
model Stake {
  id        String   @id @default(uuid()) @db.Uuid
  clientId  String   @map("client_id") @db.Uuid
  name      String   @db.VarChar(255)
  address   String   @unique @db.VarChar(42)
  network   Network
  abi       Json     @db.JsonB
  isActive  Boolean  @default(true) @map("is_active")
  metadata  Json?    @db.JsonB
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@map("stakes")
  @@index([address], map: "idx_stakes_address")
  @@index([network], map: "idx_stakes_network")
  @@index([isActive], map: "idx_stakes_active")
}

// Request Log Model
model RequestLog {
  id               String    @id @default(uuid()) @db.Uuid
  clientId         String    @map("client_id") @db.Uuid
  userId           String?   @map("user_id") @db.Uuid
  method           String    @db.VarChar(10)
  path             String    @db.VarChar(500)
  statusCode       Int       @map("status_code")
  responseTime     Int       @map("response_time")
  userAgent        String?   @map("user_agent") @db.Text
  ipAddress        String    @map("ip_address") @db.VarChar(45)
  requestBody      Json?     @map("request_body") @db.JsonB
  responseBody     Json?     @map("response_body") @db.JsonB
  error            Json?     @db.JsonB
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  client       Client        @relation(fields: [clientId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@map("request_logs")
  @@index([clientId], map: "idx_request_logs_client_id")
  @@index([userId], map: "idx_request_logs_user_id")
  @@index([createdAt], map: "idx_request_logs_created_at")
}

// Password Reset Model
model PasswordReset {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @db.VarChar(255)
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @map("expires_at") @db.Timestamptz
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("password_resets")
  @@index([email], map: "idx_password_resets_email")
  @@index([token], map: "idx_password_resets_token")
}

// Webhook Model
model Webhook {
  id            String    @id @default(uuid()) @db.Uuid
  clientId      String    @map("client_id") @db.Uuid
  name          String    @db.VarChar(100)
  url           String    @db.VarChar(500)
  events        Json      @default("[]") @db.Json
  secret        String    @db.VarChar(255)
  isActive      Boolean   @default(true) @map("is_active")
  retryCount    Int       @default(3) @map("retry_count")
  timeout       Int       @default(30000)
  lastTriggered DateTime? @map("last_triggered") @db.Timestamptz
  lastSuccess   DateTime? @map("last_success") @db.Timestamptz
  lastError     String?   @map("last_error") @db.Text
  totalTriggers Int       @default(0) @map("total_triggers")
  totalSuccess  Int       @default(0) @map("total_success")
  totalErrors   Int       @default(0) @map("total_errors")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  client Client @relation(fields: [clientId], references: [id])

  @@map("webhooks")
}

// Document Model
model Document {
  id          String            @id @default(uuid()) @db.Uuid
  clientId    String            @map("client_id") @db.Uuid
  userId      String?           @map("user_id") @db.Uuid
  filename    String            @db.VarChar(255)
  originalName String           @map("original_name") @db.VarChar(255)
  mimeType    String            @map("mime_type") @db.VarChar(100)
  size        BigInt
  category    DocumentCategory  @default(other)
  tags        Json?             @db.Json
  metadata    Json?             @db.JsonB
  path        String            @db.VarChar(500)
  url         String?           @db.VarChar(500)
  isPublic    Boolean           @default(false) @map("is_public")
  expiresAt   DateTime?         @map("expires_at") @db.Timestamptz
  downloadCount Int             @default(0) @map("download_count")
  lastDownloadAt DateTime?      @map("last_download_at") @db.Timestamptz
  createdAt   DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime          @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  client Client @relation(fields: [clientId], references: [id])

  @@map("documents")
  @@index([clientId], map: "idx_documents_client_id")
  @@index([category], map: "idx_documents_category")
  @@index([expiresAt], map: "idx_documents_expires_at")
}

// User Client Model (for multi-client relationships)
model UserClient {
  id              String            @id @default(uuid()) @db.Uuid
  userId          String            @map("user_id") @db.Uuid
  clientId        String            @map("client_id") @db.Uuid
  status          UserClientStatus  @default(pending)
  clientRole      UserRole          @default(USER) @map("client_role")
  linkedAt        DateTime?         @map("linked_at") @db.Timestamptz
  permissions     Json              @default("{}") @db.JsonB
  requestedBy     String?           @map("requested_by") @db.Uuid
  approvedBy      String?           @map("approved_by") @db.Uuid
  approvedAt      DateTime?         @map("approved_at") @db.Timestamptz
  lastAccessAt    DateTime?         @map("last_access_at") @db.Timestamptz
  accessCount     Int               @default(0) @map("access_count")
  canViewPrivateKeys Boolean        @default(false) @map("can_view_private_keys")
  metadata        Json?             @db.JsonB
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime          @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt       DateTime?         @map("deleted_at") @db.Timestamptz

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  client       Client        @relation(fields: [clientId], references: [id])
  requester    User?         @relation("UserClientRequester", fields: [requestedBy], references: [id])
  approver     User?         @relation("UserClientApprover", fields: [approvedBy], references: [id])
  transactions Transaction[]

  @@unique([userId, clientId])
  @@map("user_clients")
  @@index([userId], map: "idx_user_clients_user_id")
  @@index([clientId], map: "idx_user_clients_client_id")
  @@index([status], map: "idx_user_clients_status")
  @@index([clientRole], map: "idx_user_clients_role")
  @@index([clientId, status], map: "idx_user_clients_client_status")
  @@index([userId, status], map: "idx_user_clients_user_status")
  @@index([clientId, clientRole], map: "idx_user_clients_client_role")
}

// User Two Factor Model
model UserTwoFactor {
  id                 String        @id @default(uuid()) @db.Uuid
  userId             String        @map("user_id") @db.Uuid
  type               TwoFactorType
  secret             String?       @db.Text
  phoneNumber        String?       @map("phone_number") @db.VarChar(20)
  email              String?       @db.VarChar(255)
  isActive           Boolean       @default(false) @map("is_active")
  isVerified         Boolean       @default(false) @map("is_verified")
  backupCodes        Json?         @map("backup_codes") @db.JsonB
  usedBackupCodes    Json          @default("[]") @map("used_backup_codes") @db.JsonB
  setupCompletedAt   DateTime?     @map("setup_completed_at") @db.Timestamptz
  lastUsedAt         DateTime?     @map("last_used_at") @db.Timestamptz
  failedAttempts     Int           @default(0) @map("failed_attempts")
  lockedUntil        DateTime?     @map("locked_until") @db.Timestamptz
  settings           Json          @default("{}") @db.JsonB
  createdAt          DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime      @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt          DateTime?     @map("deleted_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, type])
  @@map("user_two_factors")
  @@index([userId], map: "idx_user_two_factors_user_id")
  @@index([userId, isActive], map: "idx_user_two_factors_user_active")
}

// Email Templates Model
model EmailTemplate {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique @db.VarChar(100)
  subject     String    @db.VarChar(255)
  htmlContent String    @map("html_content") @db.Text
  textContent String?   @map("text_content") @db.Text
  variables   Json?     @db.JsonB
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  emailLogs EmailLog[]

  @@map("email_templates")
  @@index([name], map: "idx_email_templates_name")
  @@index([isActive], map: "idx_email_templates_active")
}

// Email Logs Model
model EmailLog {
  id                String        @id @default(uuid()) @db.Uuid
  templateId        String?       @map("template_id") @db.Uuid
  toEmail           String        @map("to_email") @db.VarChar(255)
  fromEmail         String        @map("from_email") @db.VarChar(255)
  subject           String        @db.VarChar(255)
  status            EmailStatus   @default(pending)
  providerId        String?       @map("provider_id") @db.VarChar(255)
  errorMessage      String?       @map("error_message") @db.Text
  sentAt            DateTime?     @map("sent_at") @db.Timestamptz
  deliveredAt       DateTime?     @map("delivered_at") @db.Timestamptz
  openedAt          DateTime?     @map("opened_at") @db.Timestamptz
  clickedAt         DateTime?     @map("clicked_at") @db.Timestamptz
  bounced           Boolean       @default(false)
  bouncedAt         DateTime?     @map("bounced_at") @db.Timestamptz
  metadata          Json?         @db.JsonB
  createdAt         DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime      @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  template EmailTemplate? @relation(fields: [templateId], references: [id])

  @@map("email_logs")
  @@index([toEmail], map: "idx_email_logs_to_email")
  @@index([status], map: "idx_email_logs_status")
  @@index([createdAt], map: "idx_email_logs_created_at")
  @@index([templateId], map: "idx_email_logs_template_id")
}

// Client Branding Model
model ClientBranding {
  id                  String    @id @default(uuid()) @db.Uuid
  clientId            String    @unique @map("client_id") @db.Uuid
  primaryColor        String    @default("#007bff") @map("primary_color") @db.VarChar(7)
  secondaryColor      String?   @map("secondary_color") @db.VarChar(7)
  accentColor         String?   @map("accent_color") @db.VarChar(7)
  backgroundColor     String    @default("#ffffff") @map("background_color") @db.VarChar(7)
  textColor           String    @default("#333333") @map("text_color") @db.VarChar(7)
  logoUrl             String?   @map("logo_url") @db.Text
  logoUrlDark         String?   @map("logo_url_dark") @db.Text
  faviconUrl          String?   @map("favicon_url") @db.Text
  backgroundImageUrl  String?   @map("background_image_url") @db.Text
  layoutStyle         LayoutStyle @default(default) @map("layout_style")
  borderRadius        Int       @default(8) @map("border_radius")
  fontFamily          String?   @map("font_family") @db.VarChar(100)
  fontSize            FontSize  @default(medium) @map("font_size")
  loginTitle          String?   @map("login_title") @db.VarChar(100)
  loginSubtitle       String?   @map("login_subtitle") @db.VarChar(200)
  welcomeMessage      String?   @map("welcome_message") @db.Text
  footerText          String?   @map("footer_text") @db.Text
  supportUrl          String?   @map("support_url") @db.Text
  privacyPolicyUrl    String?   @map("privacy_policy_url") @db.Text
  termsOfServiceUrl   String?   @map("terms_of_service_url") @db.Text
  contactEmail        String?   @map("contact_email") @db.VarChar(255)
  customCss           String?   @map("custom_css") @db.Text
  customJs            String?   @map("custom_js") @db.Text
  allowCustomization  Boolean   @default(true) @map("allow_customization")
  isActive            Boolean   @default(true) @map("is_active")
  version             Int       @default(1)
  deployedAt          DateTime? @map("deployed_at") @db.Timestamptz
  deployedBy          String?   @map("deployed_by") @db.Uuid
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt           DateTime? @map("deleted_at") @db.Timestamptz

  // Relations
  client   Client @relation(fields: [clientId], references: [id])
  deployer User?  @relation("ClientBrandingDeployer", fields: [deployedBy], references: [id])

  @@map("client_brandings")
  @@index([clientId], map: "idx_client_brandings_client_id")
  @@index([isActive], map: "idx_client_brandings_is_active")
}

// Notification Model
model Notification {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  sender     String   @default("coinage") @db.VarChar(50)
  title      String   @db.VarChar(255)
  message    String   @db.Text
  isRead     Boolean  @default(false) @map("is_read")
  isActive   Boolean  @default(true) @map("is_active")
  isFavorite Boolean  @default(false) @map("is_favorite")
  readDate   DateTime? @map("read_date") @db.Timestamptz
  deleteDate DateTime? @map("delete_date") @db.Timestamptz
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
  @@index([userId], map: "idx_notifications_user_id")
  @@index([isActive], map: "idx_notifications_active")
  @@index([isRead], map: "idx_notifications_read")
  @@index([isFavorite], map: "idx_notifications_favorite")
  @@index([createdAt], map: "idx_notifications_created")
}

// Earnings Model - Hist√≥rico de proventos distribu√≠dos
model Earnings {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  tokenSymbol  String   @map("token_symbol") @db.VarChar(20)
  tokenName    String   @map("token_name") @db.VarChar(100)
  amount       Decimal  @db.Decimal(20, 8) // Quantidade de tokens distribu√≠dos
  quote        Decimal  @db.Decimal(20, 8) // Valor de 1 token em cBRL
  network      Network  @default(testnet)
  transactionHash String? @map("transaction_hash") @db.VarChar(66) // Hash da transa√ß√£o blockchain
  distributionDate DateTime @map("distribution_date") @db.Timestamptz // Data da distribui√ß√£o
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("earnings")
  @@index([userId], map: "idx_earnings_user_id")
  @@index([tokenSymbol], map: "idx_earnings_token_symbol")
  @@index([network], map: "idx_earnings_network")
  @@index([distributionDate], map: "idx_earnings_distribution_date")
  @@index([isActive], map: "idx_earnings_active")
}

// Enums
enum Network {
  mainnet
  testnet
}

enum TransactionType {
  transfer
  contract_deploy
  contract_call
  contract_read
}

enum TransactionStatus {
  pending
  confirmed
  failed
  cancelled
}

// Novo sistema de roles
enum UserRole {
  USER        // Usu√°rio b√°sico (acesso a pr√≥prios dados, menos chave privada)
  ADMIN       // Administrador (gest√£o de usu√°rios do mesmo cliente, dono da carteira master)
  SUPER_ADMIN // Super administrador (acesso total ao sistema, inclusive chaves privadas)
  APP_ADMIN   // Administrador do APP (acesso a quase tudo, mas n√£o chaves privadas)
}

// Planos de usu√°rio para controle de funcionalidades
enum UserPlan {
  BASIC       // Plano b√°sico: auto-sync a cada 5 minutos
  PRO         // Plano profissional: auto-sync a cada 2 minutos
  PREMIUM     // Plano premium: auto-sync a cada 1 minuto
}

enum DocumentCategory {
  identity
  address_proof
  financial
  contract
  other
}

enum UserClientStatus {
  pending
  active
  suspended
  revoked
}

enum TwoFactorType {
  totp
  sms
  email
  backup_codes
}

enum EmailStatus {
  pending
  sent
  delivered
  opened
  clicked
  bounced
  failed
}

enum LayoutStyle {
  default
  centered
  sidebar
  fullscreen
}

enum FontSize {
  small
  medium
  large
}
