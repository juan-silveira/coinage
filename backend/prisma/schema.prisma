generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
  jsonProtocol  = "js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id               String           @id @default(uuid()) @db.Uuid
  name             String           @db.VarChar(255)
  isActive         Boolean          @default(true) @map("is_active")
  rateLimit        Json             @default("{\"requestsPerDay\": 10000, \"requestsPerHour\": 1000, \"requestsPerMinute\": 100}") @map("rate_limit")
  lastActivityAt   DateTime?        @map("last_activity_at") @db.Timestamptz(6)
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  alias            String?          @unique @db.VarChar(50)
  companyBrandings CompanyBranding?
  documents        Document[]
  transactions     Transaction[]
  userActions      UserAction[]
  userCompanies    UserCompany[]

  @@index([isActive], map: "idx_companies_active")
  @@index([lastActivityAt], map: "idx_companies_last_activity")
  @@index([alias], map: "idx_companies_alias")
  @@map("companies")
}

model User {
  id                     String            @id @default(uuid()) @db.Uuid
  name                   String            @db.VarChar(255)
  email                  String            @unique @db.VarChar(255)
  cpf                    String            @unique @db.VarChar(14)
  phone                  String?           @db.VarChar(20)
  birthDate              DateTime?         @map("birth_date") @db.Date
  publicKey              String            @map("public_key")
  privateKey             String            @map("private_key")
  password               String            @db.VarChar(255)
  passwordChangedAt      DateTime?         @map("password_changed_at") @db.Timestamptz(6)
  isFirstAccess          Boolean           @default(true) @map("is_first_access")
  sessionToken           String?           @unique @map("session_token") @db.VarChar(255)
  sessionExpiresAt       DateTime?         @map("session_expires_at") @db.Timestamptz(6)
  sessionTimeout         Int               @default(600) @map("session_timeout")
  isActive               Boolean           @default(true) @map("is_active")
  emailConfirmed         Boolean           @default(false) @map("email_confirmed")
  profilePicture         String?           @map("profile_picture")
  balance                Decimal           @default(0) @db.Decimal(15, 2)
  blockchainAddress      String?           @map("blockchain_address") @db.VarChar(42)
  metadata               Json?
  lastActivityAt         DateTime?         @map("last_activity_at") @db.Timestamptz(6)
  failedLoginAttempts    Int               @default(0) @map("failed_login_attempts")
  lastFailedLoginAt      DateTime?         @map("last_failed_login_at") @db.Timestamptz(6)
  isBlockedLoginAttempts Boolean           @default(false) @map("is_blocked_login_attempts")
  createdAt              DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  userPlan               UserPlan          @default(BASIC) @map("user_plan")
  apiKeys                ApiKey[]
  deployedBrandings      CompanyBranding[] @relation("CompanyBrandingDeployer")
  earnings               Earnings[]
  notifications          Notification[]
  transactions           Transaction[]
  userActions            UserAction[]
  approvedUserCompanies  UserCompany[]     @relation("UserCompanyApprover")
  requestedUserCompanies UserCompany[]     @relation("UserCompanyRequester")
  userCompanies          UserCompany[]
  reviewedDocuments      UserDocument[]    @relation("UserDocumentReviewer")
  userDocuments          UserDocument[]
  userPixKeys            UserPixKey[]
  userTaxes              UserTaxes?
  userTwoFactors         UserTwoFactor[]

  @@index([email], map: "idx_users_email")
  @@index([cpf], map: "idx_users_cpf")
  @@index([isActive], map: "idx_users_active")
  @@index([emailConfirmed], map: "idx_users_email_confirmed")
  @@index([lastActivityAt], map: "idx_users_last_activity")
  @@index([userPlan], map: "idx_users_user_plan")
  @@map("users")
}

model ApiKey {
  id          String    @id @default(uuid()) @db.Uuid
  key         String    @unique @db.VarChar(64)
  keyHash     String    @unique @map("key_hash") @db.VarChar(255)
  name        String    @db.VarChar(100)
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  expiresAt   DateTime? @map("expires_at") @db.Timestamptz(6)
  lastUsedAt  DateTime? @map("last_used_at") @db.Timestamptz(6)
  permissions Json?
  userId      String    @map("user_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  user        User      @relation(fields: [userId], references: [id])

  @@map("api_keys")
}

model Transaction {
  id                      String             @id @default(uuid()) @db.Uuid
  companyId               String             @map("company_id") @db.Uuid
  userId                  String?            @map("user_id") @db.Uuid
  transactionType         TransactionType    @map("transaction_type")
  status                  TransactionStatus  @default(pending)
  amount                  Decimal?           @db.Decimal(20, 8)
  currency                String?            @db.VarChar(5)
  network                 Network?
  contractAddress         String?            @map("contract_address") @db.VarChar(42)
  txHash                  String?            @unique @map("tx_hash") @db.VarChar(66)
  blockNumber             BigInt?            @map("block_number")
  fromAddress             String?            @map("from_address") @db.VarChar(42)
  toAddress               String?            @map("to_address") @db.VarChar(42)
  gasUsed                 BigInt?            @map("gas_used")
  functionName            String?            @map("function_name") @db.VarChar(50)
  confirmedAt             DateTime?          @map("confirmed_at") @db.Timestamptz(6)
  failedAt                DateTime?          @map("failed_at") @db.Timestamptz(6)
  createdAt               DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)
  metadata                Json?
  pix_status              TransactionStatus?
  pix_transaction_id      String?            @db.VarChar(255)
  pix_end_to_end_id       String?            @db.VarChar(255)
  pix_key                 String?            @db.VarChar(255)
  pix_key_type            String?            @db.VarChar(50)
  pix_confirmed_at        DateTime?          @db.Timestamptz(6)
  pix_failed_at           DateTime?          @db.Timestamptz(6)
  blockchain_status       TransactionStatus?
  blockchain_tx_hash      String?            @db.VarChar(66)
  blockchain_block_number BigInt?
  blockchain_confirmed_at DateTime?          @db.Timestamptz(6)
  blockchain_failed_at    DateTime?          @db.Timestamptz(6)
  fee                     Decimal?           @default(0) @db.Decimal(15, 8)
  net_amount              Decimal?           @db.Decimal(20, 8)
  operation_type          String?            @db.VarChar(50)
  company                 Company            @relation(fields: [companyId], references: [id])
  user                    User?              @relation(fields: [userId], references: [id])

  @@index([userId, transactionType], map: "idx_transactions_user_type")
  @@index([companyId, status], map: "idx_transactions_company_status")
  @@index([transactionType, status], map: "idx_transactions_type_status")
  @@index([txHash], map: "idx_transactions_tx_hash")
  @@index([createdAt], map: "idx_transactions_created_at")
  @@index([contractAddress], map: "idx_transactions_contract")
  @@index([blockchain_status], map: "idx_transactions_blockchain_status")
  @@index([blockchain_tx_hash], map: "idx_transactions_blockchain_tx_hash")
  @@index([operation_type], map: "idx_transactions_operation_type")
  @@index([pix_status], map: "idx_transactions_pix_status")
  @@index([pix_transaction_id], map: "idx_transactions_pix_transaction_id")
  @@map("transactions")
}

model ContractType {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique @db.VarChar(50)
  description String?
  category    ContractCategory
  abiPath     String           @map("abi_path") @db.VarChar(255)
  version     String           @default("1.0.0") @db.VarChar(20)
  isActive    Boolean          @default(true) @map("is_active")
  createdAt   DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  contracts   SmartContract[]

  @@index([name], map: "idx_contract_types_name")
  @@index([category], map: "idx_contract_types_category")
  @@index([isActive], map: "idx_contract_types_active")
  @@map("contract_types")
}

model SmartContract {
  id             String        @id @default(uuid()) @db.Uuid
  companyId      String        @map("company_id") @db.Uuid
  contractTypeId String?       @map("contract_type_id") @db.Uuid
  name           String        @db.VarChar(255)
  address        String        @unique @db.VarChar(42)
  network        Network
  abi            Json?
  bytecode       String?
  isActive       Boolean       @default(true) @map("is_active")
  metadata       Json?
  deployedAt     DateTime?     @map("deployed_at") @db.Timestamptz(6)
  deployedBy     String?       @map("deployed_by") @db.Uuid
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)
  contractType   ContractType? @relation(fields: [contractTypeId], references: [id])

  @@index([address], map: "idx_smart_contracts_address")
  @@index([network], map: "idx_smart_contracts_network")
  @@index([isActive], map: "idx_smart_contracts_active")
  @@index([contractTypeId], map: "idx_smart_contracts_contract_type")
  @@index([deployedBy], map: "idx_smart_contracts_deployed_by")
  @@map("smart_contracts")
}





model Document {
  id             String           @id @default(uuid()) @db.Uuid
  companyId      String           @map("company_id") @db.Uuid
  userId         String?          @map("user_id") @db.Uuid
  filename       String           @db.VarChar(255)
  originalName   String           @map("original_name") @db.VarChar(255)
  mimeType       String           @map("mime_type") @db.VarChar(100)
  size           BigInt
  category       DocumentCategory @default(other)
  tags           Json?            @db.Json
  metadata       Json?
  path           String           @db.VarChar(500)
  url            String?          @db.VarChar(500)
  isPublic       Boolean          @default(false) @map("is_public")
  expiresAt      DateTime?        @map("expires_at") @db.Timestamptz(6)
  downloadCount  Int              @default(0) @map("download_count")
  lastDownloadAt DateTime?        @map("last_download_at") @db.Timestamptz(6)
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  company        Company          @relation(fields: [companyId], references: [id])

  @@index([companyId], map: "idx_documents_company_id")
  @@index([category], map: "idx_documents_category")
  @@index([expiresAt], map: "idx_documents_expires_at")
  @@map("documents")
}

model UserDocument {
  id              String             @id @default(uuid()) @db.Uuid
  userId          String             @map("user_id") @db.Uuid
  documentType    UserDocumentType   @map("document_type")
  status          UserDocumentStatus @default(not_sent)
  s3Url           String?            @map("s3_url") @db.VarChar(500)
  s3Key           String?            @map("s3_key") @db.VarChar(500)
  filename        String?            @db.VarChar(255)
  mimeType        String?            @map("mime_type") @db.VarChar(100)
  fileSize        BigInt?            @map("file_size")
  rejectionReason String?            @map("rejection_reason")
  reviewedBy      String?            @map("reviewed_by") @db.Uuid
  reviewedAt      DateTime?          @map("reviewed_at") @db.Timestamptz(6)
  uploadedAt      DateTime?          @map("uploaded_at") @db.Timestamptz(6)
  createdAt       DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)
  reviewer        User?              @relation("UserDocumentReviewer", fields: [reviewedBy], references: [id])
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, documentType], name: "user_document_type_unique")
  @@index([userId], map: "idx_user_documents_user_id")
  @@index([status], map: "idx_user_documents_status")
  @@index([documentType], map: "idx_user_documents_type")
  @@index([reviewedBy], map: "idx_user_documents_reviewer")
  @@index([status, documentType], map: "idx_user_documents_status_type")
  @@map("user_documents")
}

model UserCompany {
  id                 String            @id @default(uuid()) @db.Uuid
  userId             String            @map("user_id") @db.Uuid
  companyId          String            @map("company_id") @db.Uuid
  status             UserCompanyStatus @default(pending)
  role               UserRole          @default(USER)
  linkedAt           DateTime?         @map("linked_at") @db.Timestamptz(6)
  permissions        Json              @default("{}")
  requestedBy        String?           @map("requested_by") @db.Uuid
  approvedBy         String?           @map("approved_by") @db.Uuid
  approvedAt         DateTime?         @map("approved_at") @db.Timestamptz(6)
  lastAccessAt       DateTime?         @map("last_access_at") @db.Timestamptz(6)
  accessCount        Int               @default(0) @map("access_count")
  canViewPrivateKeys Boolean           @default(false) @map("can_view_private_keys")
  metadata           Json?
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt          DateTime?         @map("deleted_at") @db.Timestamptz(6)
  approver           User?             @relation("UserCompanyApprover", fields: [approvedBy], references: [id])
  company            Company           @relation(fields: [companyId], references: [id])
  requester          User?             @relation("UserCompanyRequester", fields: [requestedBy], references: [id])
  user               User              @relation(fields: [userId], references: [id])

  @@unique([userId, companyId])
  @@index([userId], map: "idx_user_companies_user_id")
  @@index([companyId], map: "idx_user_companies_company_id")
  @@index([status], map: "idx_user_companies_status")
  @@index([role], map: "idx_user_companies_role")
  @@index([companyId, status], map: "idx_user_companies_company_status")
  @@index([userId, status], map: "idx_user_companies_user_status")
  @@index([companyId, role], map: "idx_user_companies_company_role")
  @@map("user_companies")
}

model UserTwoFactor {
  id               String        @id @default(uuid()) @db.Uuid
  userId           String        @map("user_id") @db.Uuid
  type             TwoFactorType
  secret           String?
  phoneNumber      String?       @map("phone_number") @db.VarChar(20)
  email            String?       @db.VarChar(255)
  isActive         Boolean       @default(false) @map("is_active")
  isVerified       Boolean       @default(false) @map("is_verified")
  backupCodes      Json?         @map("backup_codes")
  usedBackupCodes  Json          @default("[]") @map("used_backup_codes")
  setupCompletedAt DateTime?     @map("setup_completed_at") @db.Timestamptz(6)
  lastUsedAt       DateTime?     @map("last_used_at") @db.Timestamptz(6)
  failedAttempts   Int           @default(0) @map("failed_attempts")
  lockedUntil      DateTime?     @map("locked_until") @db.Timestamptz(6)
  settings         Json          @default("{}")
  createdAt        DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt        DateTime?     @map("deleted_at") @db.Timestamptz(6)
  user             User          @relation(fields: [userId], references: [id])

  @@unique([userId, type])
  @@index([userId], map: "idx_user_two_factors_user_id")
  @@index([userId, isActive], map: "idx_user_two_factors_user_active")
  @@map("user_two_factors")
}

model EmailTemplate {
  id          String     @id @default(uuid()) @db.Uuid
  name        String     @unique @db.VarChar(100)
  subject     String     @db.VarChar(255)
  htmlContent String     @map("html_content")
  textContent String?    @map("text_content")
  variables   Json?
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([name], map: "idx_email_templates_name")
  @@index([isActive], map: "idx_email_templates_active")
  @@map("email_templates")
}


model CompanyBranding {
  id                 String      @id @default(uuid()) @db.Uuid
  companyId          String      @unique @map("company_id") @db.Uuid
  primaryColor       String      @default("#007bff") @map("primary_color") @db.VarChar(7)
  secondaryColor     String?     @map("secondary_color") @db.VarChar(7)
  accentColor        String?     @map("accent_color") @db.VarChar(7)
  backgroundColor    String      @default("#ffffff") @map("background_color") @db.VarChar(7)
  textColor          String      @default("#333333") @map("text_color") @db.VarChar(7)
  logoUrl            String?     @map("logo_url")
  logoUrlDark        String?     @map("logo_url_dark")
  faviconUrl         String?     @map("favicon_url")
  backgroundImageUrl String?     @map("background_image_url")
  layoutStyle        LayoutStyle @default(default) @map("layout_style")
  borderRadius       Int         @default(8) @map("border_radius")
  fontFamily         String?     @map("font_family") @db.VarChar(100)
  fontSize           FontSize    @default(medium) @map("font_size")
  loginTitle         String?     @map("login_title") @db.VarChar(100)
  loginSubtitle      String?     @map("login_subtitle") @db.VarChar(200)
  welcomeMessage     String?     @map("welcome_message")
  footerText         String?     @map("footer_text")
  supportUrl         String?     @map("support_url")
  privacyPolicyUrl   String?     @map("privacy_policy_url")
  termsOfServiceUrl  String?     @map("terms_of_service_url")
  contactEmail       String?     @map("contact_email") @db.VarChar(255)
  customCss          String?     @map("custom_css")
  customJs           String?     @map("custom_js")
  allowCustomization Boolean     @default(true) @map("allow_customization")
  isActive           Boolean     @default(true) @map("is_active")
  version            Int         @default(1)
  deployedAt         DateTime?   @map("deployed_at") @db.Timestamptz(6)
  deployedBy         String?     @map("deployed_by") @db.Uuid
  createdAt          DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt          DateTime?   @map("deleted_at") @db.Timestamptz(6)
  company            Company     @relation(fields: [companyId], references: [id])
  deployer           User?       @relation("CompanyBrandingDeployer", fields: [deployedBy], references: [id])

  @@index([companyId], map: "idx_company_brandings_company_id")
  @@index([isActive], map: "idx_company_brandings_is_active")
  @@map("company_brandings")
}

model Notification {
  id         String    @id @default(uuid()) @db.Uuid
  sender     String    @default("coinage") @db.VarChar(50)
  title      String    @db.VarChar(255)
  message    String
  isRead     Boolean   @default(false) @map("is_read")
  isActive   Boolean   @default(true) @map("is_active")
  readDate   DateTime? @map("read_date") @db.Timestamptz(6)
  deleteDate DateTime? @map("delete_date") @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId     String    @map("user_id") @db.Uuid
  isFavorite Boolean   @default(false) @map("is_favorite")
  user       User      @relation(fields: [userId], references: [id])

  @@index([userId], map: "idx_notifications_user_id")
  @@index([isActive], map: "idx_notifications_active")
  @@index([isRead], map: "idx_notifications_read")
  @@index([isFavorite], map: "idx_notifications_favorite")
  @@index([createdAt], map: "idx_notifications_created")
  @@map("notifications")
}


model Earnings {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  tokenSymbol      String   @map("token_symbol") @db.VarChar(20)
  tokenName        String   @map("token_name") @db.VarChar(100)
  amount           Decimal  @db.Decimal(20, 8)
  quote            Decimal  @db.Decimal(20, 8)
  network          Network  @default(testnet)
  transactionHash  String?  @map("transaction_hash") @db.VarChar(66)
  distributionDate DateTime @map("distribution_date") @db.Timestamptz(6)
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  user             User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "idx_earnings_user_id")
  @@index([tokenSymbol], map: "idx_earnings_token_symbol")
  @@index([network], map: "idx_earnings_network")
  @@index([distributionDate], map: "idx_earnings_distribution_date")
  @@index([isActive], map: "idx_earnings_active")
  @@map("earnings")
}

model UserAction {
  id           String             @id @default(uuid()) @db.Uuid
  userId       String             @map("user_id") @db.Uuid
  companyId    String?            @map("company_id") @db.Uuid
  action       UserActionType
  category     UserActionCategory
  status       UserActionStatus   @default(success)
  details      Json?
  metadata     Json?
  relatedId    String?            @map("related_id") @db.Uuid
  relatedType  String?            @map("related_type") @db.VarChar(50)
  ipAddress    String?            @map("ip_address") @db.VarChar(45)
  userAgent    String?            @map("user_agent")
  deviceInfo   Json?              @map("device_info")
  location     Json?
  errorMessage String?            @map("error_message")
  errorCode    String?            @map("error_code") @db.VarChar(50)
  duration     Int?
  performedAt  DateTime           @default(now()) @map("performed_at") @db.Timestamptz(6)
  company      Company?           @relation(fields: [companyId], references: [id])
  user         User               @relation(fields: [userId], references: [id])

  @@index([userId], map: "idx_user_actions_user_id")
  @@index([companyId], map: "idx_user_actions_company_id")
  @@index([action], map: "idx_user_actions_action")
  @@index([category], map: "idx_user_actions_category")
  @@index([status], map: "idx_user_actions_status")
  @@index([performedAt], map: "idx_user_actions_performed_at")
  @@index([relatedId], map: "idx_user_actions_related_id")
  @@index([userId, performedAt], map: "idx_user_actions_user_performed")
  @@index([userId, category], map: "idx_user_actions_user_category")
  @@index([userId, action, status], map: "idx_user_actions_user_action_status")
  @@map("user_actions")
}

model UserTaxes {
  id                 String    @id @default(uuid()) @db.Uuid
  userId             String    @unique @map("user_id") @db.Uuid
  exchangeFeePercent Float     @default(0.3) @map("exchange_fee_percent")
  transferFeePercent Float     @default(0.1) @map("transfer_fee_percent")
  gasSubsidyEnabled  Boolean   @default(false) @map("gas_subsidy_enabled")
  gasSubsidyPercent  Float     @default(0) @map("gas_subsidy_percent")
  customFees         Json?     @map("custom_fees")
  isVip              Boolean   @default(false) @map("is_vip")
  vipLevel           Int       @default(0) @map("vip_level")
  validFrom          DateTime  @default(now()) @map("valid_from") @db.Timestamptz(6)
  validUntil         DateTime? @map("valid_until") @db.Timestamptz(6)
  metadata           Json?
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  depositFee         Float     @default(3.0) @map("deposit_fee")
  withdrawFee        Float     @default(5.0) @map("withdraw_fee")
  pixValidation      Float     @default(1.0) @map("pix_validation")
  user               User      @relation(fields: [userId], references: [id])

  @@index([userId], map: "idx_user_taxes_user_id")
  @@index([isVip], map: "idx_user_taxes_is_vip")
  @@index([vipLevel], map: "idx_user_taxes_vip_level")
  @@map("user_taxes")
}

model UserPixKey {
  id               String      @id @default(uuid()) @db.Uuid
  userId           String      @map("user_id") @db.Uuid
  keyType          PixKeyType  @map("key_type")
  keyValue         String      @map("key_value") @db.VarChar(255)
  holderName       String      @map("holder_name") @db.VarChar(255)
  holderDocument   String      @map("holder_document") @db.VarChar(20)
  isVerified       Boolean     @default(false) @map("is_verified")
  isActive         Boolean     @default(true) @map("is_active")
  isDefault        Boolean     @default(false) @map("is_default")
  verificationData Json?       @map("verification_data")
  lastVerifiedAt   DateTime?   @map("last_verified_at") @db.Timestamptz(6)
  createdAt        DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([keyType, keyValue], name: "unique_pix_key")
  @@index([userId], map: "idx_user_pix_keys_user_id")
  @@index([keyType, keyValue], map: "idx_user_pix_keys_key_type_value")
  @@index([userId, isDefault], map: "idx_user_pix_keys_user_default")
  @@index([isActive], map: "idx_user_pix_keys_active")
  @@map("user_pix_keys")
}

enum Network {
  mainnet
  testnet
}

enum TransactionType {
  transfer
  contract_deploy
  contract_call
  contract_read
  deposit
  withdraw
  stake
  unstake
  exchange
  stake_reward
  fee
}

enum TransactionStatus {
  pending
  confirmed
  failed
  cancelled
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  CONFIRMED
  FAILED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  APP_ADMIN
}

enum UserPlan {
  BASIC
  PRO
  PREMIUM
}

enum DocumentCategory {
  identity
  address_proof
  financial
  contract
  other
}

enum UserCompanyStatus {
  pending
  active
  suspended
  revoked
}

enum TwoFactorType {
  totp
  sms
  email
  backup_codes
}

enum EmailStatus {
  pending
  sent
  delivered
  opened
  clicked
  bounced
  failed
}

enum LayoutStyle {
  default
  centered
  sidebar
  fullscreen
}

enum FontSize {
  small
  medium
  large
}

enum UserDocumentType {
  front
  back
  selfie
}

enum UserDocumentStatus {
  not_sent
  pending
  approved
  rejected
}

enum UserActionType {
  login
  logout
  login_failed
  password_reset
  password_changed
  two_factor_enabled
  two_factor_disabled
  two_factor_verified
  profile_updated
  profile_viewed
  document_uploaded
  document_verified
  deposit_initiated
  deposit_confirmed
  deposit_failed
  withdrawal_initiated
  withdrawal_approved
  withdrawal_completed
  withdrawal_failed
  transfer_sent
  transfer_received
  transfer_failed
  transaction_sent
  transaction_confirmed
  transaction_failed
  contract_interaction
  token_swap
  stake_created
  stake_withdrawn
  reward_claimed
  distributeReward
  api_key_created
  api_key_deleted
  suspicious_activity
  account_locked
  account_unlocked
  notification_sent
  email_sent
  webhook_triggered
  cache_cleared
  user_created
  user_updated
  user_deleted
  permission_granted
  permission_revoked
}

enum UserActionCategory {
  authentication
  profile
  financial
  blockchain
  security
  system
  admin
}

enum UserActionStatus {
  success
  failed
  pending
  cancelled
}

enum ContractCategory {
  token
  nft
  defi
  escrow
  governance
  bridge
  oracle
  other
}

enum PixKeyType {
  cpf
  email
  phone
  random
}

