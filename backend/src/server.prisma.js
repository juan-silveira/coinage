const app = require('./app');

// Importar configura√ß√£o Prisma ao inv√©s do Sequelize
const prismaConfig = require('./config/prisma');
const redisService = require('./services/redis.service');
const userCacheService = require('./services/userCache.service');

// Importar servi√ßos (mantenha os originais por enquanto, eles ser√£o migrados gradualmente)
const contractService = require('./services/contract.service');
const clientService = require('./services/client.service');
const userService = require('./services/user.service');
const logService = require('./services/log.service');
const adminService = require('./services/admin.service.prisma');
const passwordResetService = require('./services/passwordReset.service');
const tokenInitializerService = require('./services/tokenInitializer.service');
const tokenService = require('./services/token.service');
const stakeService = require('./services/stake.service');
const queueService = require('./services/queue.service');
// const initService = require('./services/init.service.prisma'); // Temporariamente desabilitado

const PORT = process.env.PORT || 3000;
const NODE_ENV = process.env.NODE_ENV || 'development';

// Fun√ß√£o para iniciar o servidor
const startServer = () => {
  try {
    app.listen(PORT, () => {
      console.log('üöÄ Azore Blockchain API Service iniciado com sucesso! (PRISMA)');
      console.log(`üìç Servidor rodando em: http://localhost:${PORT}`);
      console.log(`üåç Ambiente: ${NODE_ENV}`);
      console.log(`üóÑÔ∏è ORM: Prisma`);
      console.log(`‚è∞ Iniciado em: ${new Date().toISOString()}`);
      console.log('');
      console.log('üìã Endpoints dispon√≠veis:');
      console.log(`   Health Check: http://localhost:${PORT}/health`);
      console.log(`   API Info: http://localhost:${PORT}/`);
      console.log(`   Test Connection: http://localhost:${PORT}/api/test/connection`);
      console.log(`   Network Info: http://localhost:${PORT}/api/test/network-info`);

      console.log('');
      console.log('üîó Para testar a conex√£o com a blockchain:');
      console.log(`   curl http://localhost:${PORT}/api/test/connection`);
      console.log('');
    });
  } catch (error) {
    console.error('‚ùå Erro ao iniciar o servidor:', error);
    process.exit(1);
  }
};

// Inicializa√ß√£o ass√≠ncrona com Prisma
(async () => {
  try {
    console.log('üîç Inicializando conex√£o Prisma...');
    const prisma = await prismaConfig.initialize();
    console.log('‚úÖ Conex√£o Prisma estabelecida');
    
    // Disponibilizar Prisma globalmente (para compatibilidade com c√≥digo existente)
    global.prisma = prisma;
    global.prismaConfig = prismaConfig;
    
    // Para compatibilidade com c√≥digo Sequelize existente, criar um mock b√°sico
    global.models = {
      // Os services antigos ainda v√£o funcionar por enquanto
      // Gradualmente ser√£o migrados para usar Prisma diretamente
    };
    
    // Inicializar Redis
    console.log('üîç Inicializando Redis...');
    await redisService.initialize();
    console.log('‚úÖ Redis inicializado');
    
    // Inicializar UserCacheService
    console.log('üîç Inicializando UserCacheService...');
    await userCacheService.initialize();
    console.log('‚úÖ UserCacheService inicializado');
    
    // Inicializar servi√ßos (alguns podem falhar se dependem de Sequelize, mas n√£o vamos quebrar)
    console.log('üîç Inicializando servi√ßos...');
    
    try {
      await contractService.initialize();
      console.log('‚úÖ Contract service inicializado');
    } catch (error) {
      console.log('‚ö†Ô∏è Contract service: n√£o inicializado (aguardando migra√ß√£o para Prisma)');
    }
    
    try {
      await clientService.initialize();
      console.log('‚úÖ Client service (Prisma) inicializado');
    } catch (error) {
      console.log('‚ö†Ô∏è Client service: erro na inicializa√ß√£o -', error.message);
    }
    
    try {
      await userService.init();
      console.log('‚úÖ User service (Prisma) inicializado');
    } catch (error) {
      console.log('‚ö†Ô∏è User service: erro na inicializa√ß√£o -', error.message);
    }
    
    try {
      await logService.initialize();
      console.log('‚úÖ Log service inicializado');
    } catch (error) {
      console.log('‚ö†Ô∏è Log service: n√£o inicializado (aguardando migra√ß√£o para Prisma)');
    }
    
    try {
      await passwordResetService.initialize();
      console.log('‚úÖ Password reset service inicializado');
    } catch (error) {
      console.log('‚ö†Ô∏è Password reset service: n√£o inicializado (aguardando migra√ß√£o para Prisma)');
    }
    
    try {
      await tokenService.initialize();
      console.log('‚úÖ Token service inicializado');
    } catch (error) {
      console.log('‚ö†Ô∏è Token service: n√£o inicializado (aguardando migra√ß√£o para Prisma)');
    }
    
    try {
      await stakeService.initialize();
      console.log('‚úÖ Stake service inicializado');
    } catch (error) {
      console.log('‚ö†Ô∏è Stake service: n√£o inicializado (aguardando migra√ß√£o para Prisma)');
    }
    
    // Inicializar fila (opcional)
    try {
      await queueService.initialize();
      console.log('‚úÖ Queue service inicializado');
    } catch (error) {
      console.log('‚ö†Ô∏è Queue service: n√£o dispon√≠vel');
    }
    
    // Tentar inicializar sistema completo
    try {
      await initService.initializeSystem();
      console.log('‚úÖ Sistema inicializado');
    } catch (error) {
      console.log('‚ö†Ô∏è Sistema: inicializa√ß√£o parcial (alguns servi√ßos podem n√£o estar dispon√≠veis)');
    }
    
    // Tentar inicializar tokens padr√£o
    try {
      // Este precisa ser ajustado para funcionar com Prisma
      console.log('‚ö†Ô∏è Tokens padr√£o: aguardando migra√ß√£o para Prisma');
    } catch (error) {
      console.log('‚ö†Ô∏è Tokens padr√£o: n√£o inicializados');
    }
    
    console.log('');
    console.log('üéâ Sistema iniciado com Prisma!');
    console.log('üìù Nota: Alguns servi√ßos podem n√£o estar dispon√≠veis at√© a migra√ß√£o completa');
    console.log('');
    
    startServer();
  } catch (err) {
    console.error('‚ùå Erro na inicializa√ß√£o do Prisma:', err);
    
    // Tentar iniciar mesmo com alguns erros (modo degradado)
    console.log('üîÑ Tentando iniciar em modo degradado...');
    try {
      startServer();
    } catch (serverError) {
      console.error('‚ùå Erro cr√≠tico ao iniciar servidor:', serverError);
      process.exit(1);
    }
  }
})();

// Tratamento de sinais para graceful shutdown
process.on('SIGTERM', async () => {
  console.log('üõë SIGTERM recebido, encerrando servidor...');
  try {
    await prismaConfig.close();
    console.log('‚úÖ Conex√µes Prisma fechadas');
  } catch (error) {
    console.error('‚ùå Erro ao fechar conex√µes:', error);
  }
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('üõë SIGINT recebido, encerrando servidor...');
  try {
    await prismaConfig.close();
    console.log('‚úÖ Conex√µes Prisma fechadas');
  } catch (error) {
    console.error('‚ùå Erro ao fechar conex√µes:', error);
  }
  process.exit(0);
});

// Tratamento de erros n√£o capturados
process.on('uncaughtException', (error) => {
  console.error('‚ö†Ô∏è Erro n√£o capturado (continuando):', error);
  // N√£o encerrar o processo para permitir que o servidor continue funcionando
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ö†Ô∏è Promise rejeitada n√£o tratada (continuando):', reason);
  // N√£o encerrar o processo para permitir que o servidor continue funcionando
});
