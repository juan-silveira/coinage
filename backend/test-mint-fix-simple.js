require('dotenv').config({ path: '.env.testnet' });
const prismaConfig = require('./src/config/prisma');
const DepositService = require('./src/services/deposit.service');

async function testMintFix() {
  try {
    console.log('üîß Testando corre√ß√£o do MINT com TX_HASH salvo no banco');
    console.log('=' .repeat(60));
    
    // Inicializar servi√ßos
    await prismaConfig.initialize();
    const prisma = prismaConfig.getPrisma();
    const depositService = new DepositService();
    
    const userId = '9f5051e3-58fa-4bde-9cac-199effeea35e'; // Ivan
    const amount = '42.30';
    
    // PASSO 1: Criar dep√≥sito
    console.log('\\nüì• PASSO 1: Criando dep√≥sito...');
    const deposit = await depositService.initiateDeposit(amount, userId);
    console.log(`‚úÖ Dep√≥sito criado:
    - ID: ${deposit.transactionId}
    - Valor: R$ ${amount}
    - Status: ${deposit.status}`);
    
    // PASSO 2: Pular simula√ß√£o de PIX para focar no mint
    console.log('\\nüí≥ PASSO 2: Mantendo dep√≥sito como pendente para teste do confirmDeposit...');
    
    // PASSO 3: Executar mint atrav√©s do confirmDeposit (m√©todo corrigido)
    console.log('\\nüè≠ PASSO 3: Executando confirmDeposit (que ir√° criar e executar o mint)...');
    
    // Dados mockados para o dep√≥sito
    const mockDepositTxHash = `0x${Math.random().toString(16).substr(2, 64)}`;
    const mockBlockNumber = Math.floor(Math.random() * 1000000) + 1;
    const mockGasUsed = Math.floor(Math.random() * 100000) + 21000;
    
    // Confirmar dep√≥sito - isso deve criar automaticamente a transa√ß√£o de mint
    const confirmedDeposit = await depositService.confirmDeposit(
      deposit.transactionId,
      mockDepositTxHash,
      mockBlockNumber,
      mockGasUsed
    );
    
    console.log(`‚úÖ Mint executado via confirmDeposit!`);
    
    // PASSO 4: Verificar se ambas transa√ß√µes foram salvas
    console.log('\\nüîç PASSO 4: Verificando transa√ß√µes no banco...');
    
    // Verificar transa√ß√£o de dep√≥sito
    const depositTx = await prisma.transaction.findUnique({
      where: { id: deposit.transactionId }
    });
    
    console.log(`üìù DEP√ìSITO:
    - ID: ${depositTx.id.substring(0, 8)}...
    - Tipo: ${depositTx.transactionType}
    - Status: ${depositTx.status}
    - TX Hash: ${depositTx.txHash || 'N√£o salvo'}
    - Block: ${depositTx.blockNumber || 'N/A'}`);
    
    // Verificar transa√ß√£o de mint
    const mintTx = await prisma.transaction.findFirst({
      where: {
        transactionType: 'contract_call',
        functionName: 'mint',
        metadata: {
          path: ['depositTransactionId'],
          equals: deposit.transactionId
        }
      }
    });
    
    if (mintTx) {
      console.log(`ü™ô MINT:
    - ID: ${mintTx.id.substring(0, 8)}...
    - Tipo: ${mintTx.transactionType}
    - Function: ${mintTx.functionName}
    - Status: ${mintTx.status}
    - TX Hash: ${mintTx.txHash || 'N√£o salvo ‚ùå'}
    - Block: ${mintTx.blockNumber || 'N/A'}
    - Gas Used: ${mintTx.gasUsed || 'N/A'}
    - To Address: ${mintTx.toAddress}`);
      
      // Verificar se tem dados da blockchain na metadata
      if (mintTx.metadata && mintTx.metadata.mintResult) {
        console.log(`üìä Dados do blockchain na metadata:
    - TX Hash: ${mintTx.metadata.mintResult.transactionHash}
    - Block: ${mintTx.metadata.mintResult.blockNumber}
    - Gas: ${mintTx.metadata.mintResult.gasUsed}
    - Explorer: ${mintTx.metadata.mintResult.explorerUrl}`);
      }
    } else {
      console.log('‚ùå Transa√ß√£o de mint n√£o encontrada!');
    }
    
    // PASSO 5: Resumo final
    console.log('\\n' + '=' .repeat(60));
    console.log('üìã RESUMO DO TESTE:');
    
    const hasTxHashInDepositField = depositTx.txHash ? '‚úÖ' : '‚ùå';
    const hasTxHashInMintField = mintTx && mintTx.txHash ? '‚úÖ' : '‚ùå';
    const hasMintMetadata = mintTx && mintTx.metadata && mintTx.metadata.mintResult ? '‚úÖ' : '‚ùå';
    
    console.log(`${hasTxHashInDepositField} TX Hash salvo no campo da transa√ß√£o de DEP√ìSITO`);
    console.log(`${hasTxHashInMintField} TX Hash salvo no campo da transa√ß√£o de MINT`);
    console.log(`${hasMintMetadata} Metadata da blockchain salva na transa√ß√£o de MINT`);
    console.log(`${mintTx ? '‚úÖ' : '‚ùå'} Transa√ß√£o de mint criada separadamente`);
    
    if (hasTxHashInMintField === '‚úÖ' && hasMintMetadata === '‚úÖ') {
      console.log('\\nüéâ CORRE√á√ÉO FUNCIONOU! TX_HASH est√° sendo salvo corretamente!');
    } else {
      console.log('\\n‚ö†Ô∏è Ainda h√° problemas com o salvamento do TX_HASH');
    }
    
    console.log('=' .repeat(60));
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    process.exit(1);
  }
}

testMintFix();