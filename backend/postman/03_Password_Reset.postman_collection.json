{
  "info": {
    "name": "03 - Password Reset",
    "description": "Testes completos para o sistema de recuperação de senha",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0",
    "_postman_id": "03-password-reset-2024"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8800",
      "type": "string"
    },
    {
      "key": "userEmail",
      "value": "ivan.alberton@navi.inf.br",
      "type": "string"
    },
    {
      "key": "resetToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "01 - Request Password Reset",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Success response', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.message).to.contain('Email de recuperação enviado');",
              "});",
              "",
              "pm.test('Response contains user info', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.be.an('object');",
              "    pm.expect(jsonData.data.email).to.eql(pm.variables.get('userEmail'));",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"company\": \"coinage\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/password-reset/request",
          "host": ["{{baseUrl}}"],
          "path": ["api", "password-reset", "request"]
        },
        "description": "Solicita reset de senha por email"
      }
    },
    {
      "name": "02 - Validate Reset Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Token is valid', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.message).to.contain('Token válido');",
              "});",
              "",
              "pm.test('User data is returned', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.be.an('object');",
              "    pm.expect(jsonData.data.email).to.not.be.empty;",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/password-reset/validate/{{resetToken}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "password-reset", "validate", "{{resetToken}}"]
        },
        "description": "Valida se o token de reset é válido"
      }
    },
    {
      "name": "03 - Reset Password",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Password reset successful', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.message).to.contain('Senha alterada com sucesso');",
              "});",
              "",
              "pm.test('User data is returned', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.be.an('object');",
              "    pm.expect(jsonData.data.email).to.not.be.empty;",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"newPassword\": \"N@vi@2025New\",\n  \"confirmPassword\": \"N@vi@2025New\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/password-reset/reset/{{resetToken}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "password-reset", "reset", "{{resetToken}}"]
        },
        "description": "Efetua o reset da senha usando token válido"
      }
    },
    {
      "name": "04 - Test Login with New Password",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Login successful with new password', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.message).to.contain('Login realizado com sucesso');",
              "});",
              "",
              "pm.test('Access token received', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.be.an('object');",
              "    pm.expect(jsonData.data.token).to.not.be.empty;",
              "    pm.collectionVariables.set('accessToken', jsonData.data.token);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"N@vi@2025New\",\n  \"company\": \"coinage\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "login"]
        },
        "description": "Testa login com nova senha após reset"
      }
    },
    {
      "name": "05 - Invalid Token Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400 or 404', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
              "});",
              "",
              "pm.test('Error message is appropriate', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.false;",
              "    pm.expect(jsonData.message).to.contain('Token');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/password-reset/validate/invalid-token-12345",
          "host": ["{{baseUrl}}"],
          "path": ["api", "password-reset", "validate", "invalid-token-12345"]
        },
        "description": "Testa validação com token inválido"
      }
    },
    {
      "name": "06 - Expired Token Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Expired token message', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.false;",
              "    pm.expect(jsonData.message).to.contain('expirado');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/password-reset/validate/expired-token-123",
          "host": ["{{baseUrl}}"],
          "path": ["api", "password-reset", "validate", "expired-token-123"]
        },
        "description": "Testa comportamento com token expirado"
      }
    },
    {
      "name": "07 - Multiple Reset Attempts",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Multiple requests handled', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    // Verifica se múltiplas solicitações são tratadas adequadamente",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"company\": \"coinage\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/password-reset/request",
          "host": ["{{baseUrl}}"],
          "path": ["api", "password-reset", "request"]
        },
        "description": "Testa múltiplas tentativas de reset"
      }
    },
    {
      "name": "08 - Password Requirements Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Password validation error', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.false;",
              "    pm.expect(jsonData.message).to.contain('senha');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"newPassword\": \"123\",\n  \"confirmPassword\": \"123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/password-reset/reset/{{resetToken}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "password-reset", "reset", "{{resetToken}}"]
        },
        "description": "Testa validação de requisitos de senha"
      }
    }
  ]
}