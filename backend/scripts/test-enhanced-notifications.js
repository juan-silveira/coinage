const { PrismaClient } = require('../src/generated/prisma');
const NotificationService = require('../src/services/notification.service');

const prisma = new PrismaClient();
const notificationService = new NotificationService();

async function testEnhancedNotifications() {
  try {
    console.log('üß™ Testando funcionalidades aprimoradas de notifica√ß√µes...\n');

    // Buscar usu√°rio Ivan
    const user = await prisma.user.findFirst({
      where: { email: 'ivan.alberton@navi.inf.br' }
    });

    if (!user) {
      console.error('‚ùå Usu√°rio Ivan n√£o encontrado');
      return;
    }

    console.log(`‚úÖ Usu√°rio encontrado: ${user.name} (${user.email})`);

    // 1. Testar cria√ß√£o de notifica√ß√£o com emojis
    console.log('\nüìù 1. Testando cria√ß√£o de notifica√ß√£o com emojis...');
    const notification1 = await notificationService.createNotification({
      userId: user.id,
      sender: 'coinage',
      title: 'üöÄ Nova funcionalidade dispon√≠vel!',
      message: 'O sistema de notifica√ß√µes foi **atualizado** com novas funcionalidades como *favoritos* e `filtros`.'
    });
    console.log(`‚úÖ Notifica√ß√£o criada: ${notification1.title}`);

    // 2. Testar notifica√ß√£o de mudan√ßa de saldo
    console.log('\nüí∞ 2. Testando notifica√ß√£o de mudan√ßa de saldo...');
    const notification2 = await notificationService.createBalanceChangeNotification(
      user.id, 'BTC', '0.001', '0.002', '100', 'aumentou'
    );
    console.log(`‚úÖ Notifica√ß√£o de saldo criada: ${notification2.title}`);

    // 3. Testar notifica√ß√£o de recebimento de token
    console.log('\nüì• 3. Testando notifica√ß√£o de recebimento de token...');
    const notification3 = await notificationService.createTokenBalanceChangeNotification(
      user.id, 0.001, 0.002, 'ETH', '0x1234567890abcdef'
    );
    console.log(`‚úÖ Notifica√ß√£o de recebimento criada: ${notification3.title}`);

    // 4. Testar marca√ß√£o como favorita
    console.log('\n‚≠ê 4. Testando marca√ß√£o como favorita...');
    const favoritedNotification = await notificationService.toggleFavorite(notification1.id);
    console.log(`‚úÖ Notifica√ß√£o marcada como favorita: ${favoritedNotification.isFavorite}`);

    // 5. Testar marca√ß√£o como lida
    console.log('\nüëÅÔ∏è 5. Testando marca√ß√£o como lida...');
    const readNotification = await notificationService.markAsRead(notification2.id);
    console.log(`‚úÖ Notifica√ß√£o marcada como lida: ${readNotification.isRead}`);

    // 6. Testar marca√ß√£o como n√£o lida
    console.log('\nüôà 6. Testando marca√ß√£o como n√£o lida...');
    const unreadNotification = await notificationService.markAsUnread(notification2.id);
    console.log(`‚úÖ Notifica√ß√£o marcada como n√£o lida: ${unreadNotification.isRead}`);

    // 7. Testar marca√ß√£o m√∫ltipla como lida
    console.log('\nüìã 7. Testando marca√ß√£o m√∫ltipla como lida...');
    const result = await notificationService.markMultipleAsRead([notification1.id, notification2.id, notification3.id]);
    console.log(`‚úÖ ${result.count} notifica√ß√µes marcadas como lidas`);

    // 8. Testar busca de notifica√ß√µes favoritas
    console.log('\nüîç 8. Testando busca de notifica√ß√µes favoritas...');
    const favoriteNotifications = await prisma.notification.findMany({
      where: {
        userId: user.id,
        isFavorite: true,
        isActive: true
      }
    });
    console.log(`‚úÖ Encontradas ${favoriteNotifications.length} notifica√ß√µes favoritas`);

    // 9. Testar contagem de n√£o lidas
    console.log('\nüìä 9. Testando contagem de n√£o lidas...');
    const unreadCount = await notificationService.getUnreadCount(user.id);
    console.log(`‚úÖ Notifica√ß√µes n√£o lidas: ${unreadCount}`);

    // 10. Testar limpeza de markdown
    console.log('\nüßπ 10. Testando limpeza de markdown...');
    const markdownText = '**Texto em negrito** e *texto em it√°lico* com `c√≥digo`';
    const cleanText = notificationService.cleanMarkdown(markdownText);
    console.log(`‚úÖ Markdown limpo: "${cleanText}"`);

    // 11. Testar obten√ß√£o de emoji por tipo
    console.log('\nüé® 11. Testando obten√ß√£o de emoji por tipo...');
    const emoji1 = notificationService.getNotificationEmoji('balance_change');
    const emoji2 = notificationService.getNotificationEmoji('success');
    console.log(`‚úÖ Emojis: ${emoji1} (balance_change), ${emoji2} (success)`);

    // 12. Listar todas as notifica√ß√µes
    console.log('\nüìã 12. Listando todas as notifica√ß√µes...');
    const allNotifications = await notificationService.getActiveNotifications(user.id);
    console.log(`‚úÖ Total de notifica√ß√µes: ${allNotifications.length}`);
    
    allNotifications.forEach((notification, index) => {
      console.log(`   ${index + 1}. ${notification.title} (${notification.isRead ? 'Lida' : 'N√£o lida'}) ${notification.isFavorite ? '‚≠ê' : ''}`);
    });

    console.log('\nüéâ Todos os testes conclu√≠dos com sucesso!');
    console.log('\nüì± Agora teste no frontend:');
    console.log('   - Acesse a p√°gina de notifica√ß√µes');
    console.log('   - Teste os filtros (Todas, N√£o lidas, Lidas, Favoritas)');
    console.log('   - Teste a sele√ß√£o m√∫ltipla e a√ß√µes em lote');
    console.log('   - Teste marcar/desmarcar como favorita');
    console.log('   - Teste marcar como n√£o lida');
    console.log('   - Clique em uma notifica√ß√£o para abrir a p√°gina individual');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar testes
testEnhancedNotifications();
