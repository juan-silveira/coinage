const axios = require('axios');

const API_BASE_URL = 'http://localhost:8800';

async function testNotificationRoutes() {
  try {
    console.log('üß™ Testando rotas de notifica√ß√£o...\n');

    // 1. Testar rota de notifica√ß√µes (deve retornar 401 sem token)
    console.log('üîç 1. Testando rota /api/notifications (sem token)...');
    try {
      const response = await axios.get(`${API_BASE_URL}/api/notifications`);
      console.log('‚ùå Erro: deveria retornar 401, mas retornou:', response.status);
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Rota protegida funcionando corretamente (401 Unauthorized)');
      } else {
        console.log('‚ùå Erro inesperado:', error.response?.status);
      }
    }

    // 2. Testar rota individual (deve retornar 401 sem token)
    console.log('\nüîç 2. Testando rota /api/notifications/123 (sem token)...');
    try {
      const response = await axios.get(`${API_BASE_URL}/api/notifications/123`);
      console.log('‚ùå Erro: deveria retornar 401, mas retornou:', response.status);
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Rota individual protegida funcionando corretamente (401 Unauthorized)');
      } else {
        console.log('‚ùå Erro inesperado:', error.response?.status);
      }
    }

    // 3. Testar rota de favoritar (deve retornar 401 sem token)
    console.log('\nüîç 3. Testando rota /api/notifications/123/favorite (sem token)...');
    try {
      const response = await axios.put(`${API_BASE_URL}/api/notifications/123/favorite`);
      console.log('‚ùå Erro: deveria retornar 401, mas retornou:', response.status);
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Rota de favoritar protegida funcionando corretamente (401 Unauthorized)');
      } else {
        console.log('‚ùå Erro inesperado:', error.response?.status);
      }
    }

    // 4. Testar rota de marcar como n√£o lida (deve retornar 401 sem token)
    console.log('\nüîç 4. Testando rota /api/notifications/123/unread (sem token)...');
    try {
      const response = await axios.put(`${API_BASE_URL}/api/notifications/123/unread`);
      console.log('‚ùå Erro: deveria retornar 401, mas retornou:', response.status);
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Rota de marcar como n√£o lida protegida funcionando corretamente (401 Unauthorized)');
      } else {
        console.log('‚ùå Erro inesperado:', error.response?.status);
      }
    }

    // 5. Verificar se o servidor est√° rodando
    console.log('\nüîç 5. Verificando se o servidor est√° rodando...');
    try {
      const response = await axios.get(`${API_BASE_URL}/health`);
      console.log('‚úÖ Servidor respondendo:', response.status);
    } catch (error) {
      console.log('‚ùå Servidor n√£o est√° respondendo ou rota /health n√£o existe');
    }

    console.log('\nüéâ Testes de rotas conclu√≠dos!');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
  }
}

// Executar testes
testNotificationRoutes();

