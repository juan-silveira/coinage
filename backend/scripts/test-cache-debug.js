const redisService = require('../src/services/redis.service');

/**
 * Debug do cache Redis
 */
async function testCacheDebug() {
  console.log('üîç Debug do cache Redis...\n');

  const userId = 'c4566d05-3243-4008-a4be-6d96b01de8c8';
  const address = '0x5528C065931f523CA9F3a6e49a911896fb1D2e6f';

  try {
    // 1. Inicializar Redis
    console.log('1Ô∏è‚É£ Inicializando Redis...');
    await redisService.initialize();
    
    const connectionTest = await redisService.testConnection();
    console.log('Redis Status:', connectionTest.success ? '‚úÖ Conectado' : '‚ùå Desconectado');
    console.log('');

    if (!connectionTest.success) {
      console.log('‚ùå Falha na conex√£o com Redis');
      return;
    }

    // 2. Verificar se h√° dados no cache
    console.log('2Ô∏è‚É£ Verificando dados no cache...');
    const cachedUserData = await redisService.getCachedUserData(userId);
    const cachedBalances = await redisService.getCachedUserBalances(userId, address);
    
    console.log('üë§ Dados do usu√°rio no cache:', cachedUserData ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado');
    console.log('üí∞ Balances no cache:', cachedBalances ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado');
    console.log('');

    // 3. Simular dados de balances
    console.log('3Ô∏è‚É£ Simulando dados de balances...');
    const balancesData = {
      address: address,
      network: 'testnet',
      azeBalance: {
        balanceWei: '424822636000000000',
        balanceEth: '0.424822636'
      },
      tokenBalances: [
        {
          contractAddress: '0x1234567890123456789012345678901234567890',
          tokenName: 'Test Token',
          tokenSymbol: 'TEST',
          tokenDecimals: 18,
          balanceWei: '1000000000000000000',
          balanceEth: '1.0'
        }
      ],
      balancesTable: {
        AZE: '0.424822636',
        cBRL: '0',
        TEST: '1.0'
      },
      totalTokens: 2,
      timestamp: new Date().toISOString()
    };

    // 4. Cachear balances
    console.log('4Ô∏è‚É£ Cacheando balances...');
    const cacheResult = await redisService.cacheUserBalances(userId, address, balancesData, 300);
    console.log('‚úÖ Balances cacheados:', cacheResult ? 'Sucesso' : 'Falha');
    console.log('');

    // 5. Verificar novamente
    console.log('5Ô∏è‚É£ Verificando cache ap√≥s armazenamento...');
    const cachedBalancesAfter = await redisService.getCachedUserBalances(userId, address);
    
    if (cachedBalancesAfter) {
      console.log('‚úÖ Balances encontrados no cache!');
      console.log('   üìç Endere√ßo:', cachedBalancesAfter.address);
      console.log('   üíé Saldo AZE:', cachedBalancesAfter.balancesTable.AZE);
      console.log('   üí∞ cBRL:', cachedBalancesAfter.balancesTable.cBRL);
      console.log('   üß™ TEST:', cachedBalancesAfter.balancesTable.TEST);
      console.log('   ‚è∞ Cacheado em:', cachedBalancesAfter.cachedAt);
    } else {
      console.log('‚ùå Balances n√£o encontrados no cache');
    }
    console.log('');

    // 6. Simular verifica√ß√£o do controller
    console.log('6Ô∏è‚É£ Simulando verifica√ß√£o do controller...');
    console.log('üîç Verificando cache para userId:', userId);
    console.log('üîç Verificando cache para address:', address);
    
    const controllerCacheCheck = await redisService.getCachedUserBalances(userId, address);
    
    if (controllerCacheCheck) {
      console.log('‚úÖ Controller encontraria dados no cache!');
      console.log('üìä Resposta que seria retornada:');
      console.log('   success: true');
      console.log('   fromCache: true');
      console.log('   data: [dados do cache]');
    } else {
      console.log('‚ùå Controller n√£o encontraria dados no cache');
    }
    console.log('');

    // 7. Estat√≠sticas finais
    console.log('7Ô∏è‚É£ Estat√≠sticas finais...');
    const stats = await redisService.getCacheStats();
    console.log('üìä Estat√≠sticas:');
    console.log(`   üîó Conectado: ${stats.isConnected ? '‚úÖ' : '‚ùå'}`);
    console.log(`   üë• Usu√°rios cacheados: ${stats.userCache.count}`);
    console.log(`   üí∞ Balances cacheados: ${stats.balancesCache.count}`);
    console.log(`   üìà Total de chaves: ${stats.totalKeys}`);
    console.log('');

    // 8. Verificar chaves espec√≠ficas
    console.log('8Ô∏è‚É£ Verificando chaves espec√≠ficas...');
    const userKey = `user:${userId}`;
    const balanceKey = `balances:${userId}:${address}`;
    
    console.log('üîë Chave do usu√°rio:', userKey);
    console.log('üîë Chave dos balances:', balanceKey);
    console.log('');

    console.log('‚úÖ Debug conclu√≠do!');
    console.log('üí° O cache est√° funcionando corretamente');
    console.log('üí° O problema pode estar na verifica√ß√£o do controller');

  } catch (error) {
    console.error('‚ùå Erro durante o debug:', error.message);
  } finally {
    // Fechar conex√£o
    await redisService.disconnect();
    console.log('üîå Conex√£o com Redis fechada');
  }
}

// Executar debug se o script for chamado diretamente
if (require.main === module) {
  testCacheDebug();
}

module.exports = { testCacheDebug };

