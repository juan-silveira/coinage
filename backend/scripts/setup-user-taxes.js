const { PrismaClient } = require('../src/generated/prisma');

const prisma = new PrismaClient();

async function setupUserTaxes() {
  try {
    console.log('üè¶ Configurando taxas para usu√°rio padr√£o...');

    // Buscar usu√°rio padr√£o
    const defaultUser = await prisma.user.findUnique({
      where: {
        email: 'ivan.alberton@navi.inf.br'
      }
    });

    if (!defaultUser) {
      console.log('‚ùå Usu√°rio padr√£o n√£o encontrado!');
      return;
    }

    console.log(`üë§ Usu√°rio encontrado: ${defaultUser.name} (${defaultUser.email})`);

    // Verificar se j√° existe configura√ß√£o de taxas
    let userTaxes = await prisma.userTaxes.findUnique({
      where: {
        userId: defaultUser.id
      }
    });

    if (userTaxes) {
      console.log('üìã Configura√ß√£o de taxas j√° existe. Atualizando...');
      
      // Atualizar com taxa fixa de R$ 3,00 para dep√≥sitos
      userTaxes = await prisma.userTaxes.update({
        where: {
          userId: defaultUser.id
        },
        data: {
          // Para ter taxa FIXA de R$ 3,00, usamos uma porcentagem muito baixa com m√≠nimo de 3
          depositFeePercent: 0.001, // 0.001% (praticamente zero)
          minDepositFee: 3.0, // Taxa m√≠nima de R$ 3,00 (que ser√° sempre aplicada)
          maxDepositFee: 3.0, // Taxa m√°xima de R$ 3,00 (para manter fixo)
          
          // Outras taxas (manter padr√µes)
          withdrawFeePercent: 0.5,
          minWithdrawFee: 2.0,
          exchangeFeePercent: 0.3,
          transferFeePercent: 0.1,
          
          // Metadados para lembrar da configura√ß√£o
          metadata: {
            depositTaxType: 'fixed',
            depositFixedAmount: 3.0,
            currency: 'BRL',
            note: 'Taxa fixa de R$ 3,00 para dep√≥sitos'
          }
        }
      });
    } else {
      console.log('üìã Criando nova configura√ß√£o de taxas...');
      
      // Criar nova configura√ß√£o com taxa fixa de R$ 3,00 para dep√≥sitos
      userTaxes = await prisma.userTaxes.create({
        data: {
          userId: defaultUser.id,
          
          // Para ter taxa FIXA de R$ 3,00, usamos uma porcentagem muito baixa com m√≠nimo de 3
          depositFeePercent: 0.001, // 0.001% (praticamente zero)
          minDepositFee: 3.0, // Taxa m√≠nima de R$ 3,00 (que ser√° sempre aplicada)
          maxDepositFee: 3.0, // Taxa m√°xima de R$ 3,00 (para manter fixo)
          
          // Outras taxas (padr√µes)
          withdrawFeePercent: 0.5,
          minWithdrawFee: 2.0,
          exchangeFeePercent: 0.3,
          transferFeePercent: 0.1,
          
          // Metadados
          metadata: {
            depositTaxType: 'fixed',
            depositFixedAmount: 3.0,
            currency: 'BRL',
            note: 'Taxa fixa de R$ 3,00 para dep√≥sitos'
          }
        }
      });
    }

    console.log('‚úÖ Configura√ß√£o de taxas configurada com sucesso!');
    console.log(`üí∞ Taxa de dep√≥sito: R$ 3,00 (fixa)`);
    console.log(`üìä Estrutura:`);
    console.log(`   - Percentual: ${userTaxes.depositFeePercent}% (quase zero)`);
    console.log(`   - Taxa m√≠nima: R$ ${userTaxes.minDepositFee}`);
    console.log(`   - Taxa m√°xima: R$ ${userTaxes.maxDepositFee}`);

    // Teste com valor de exemplo
    console.log(`\nüßÆ Exemplo de c√°lculo:`);
    const exampleAmount = 14.65;
    const taxAmount = Math.max(
      exampleAmount * (userTaxes.depositFeePercent / 100), // Percentual (quase zero)
      userTaxes.minDepositFee // M√≠nimo (R$ 3,00)
    );
    const finalTaxAmount = userTaxes.maxDepositFee ? Math.min(taxAmount, userTaxes.maxDepositFee) : taxAmount;
    const totalAmount = exampleAmount + finalTaxAmount;
    
    console.log(`   - Valor desejado: R$ ${exampleAmount.toFixed(2)}`);
    console.log(`   - Taxa calculada: R$ ${finalTaxAmount.toFixed(2)}`);
    console.log(`   - Total a pagar: R$ ${totalAmount.toFixed(2)}`);
    console.log(`   - Valor final (cBRL): ${exampleAmount.toFixed(2)}`);

  } catch (error) {
    console.error('‚ùå Erro ao configurar taxas:', error);
  } finally {
    await prisma.$disconnect();
  }
}

setupUserTaxes();