const { PrismaClient } = require('../src/generated/prisma');
const NotificationService = require('../src/services/notification.service');

const prisma = new PrismaClient();
const notificationService = new NotificationService();

async function testNotifications() {
  try {
    console.log('üß™ Testando sistema de notifica√ß√µes...\n');

    // 1. Testar cria√ß√£o de notifica√ß√£o
    console.log('1. Criando notifica√ß√£o de teste...');
    const testNotification = await notificationService.createNotification({
      sender: 'coinage',
      title: 'Teste de Notifica√ß√£o',
      message: 'Esta √© uma **notifica√ß√£o de teste** para verificar o sistema.'
    });
    console.log('‚úÖ Notifica√ß√£o criada:', testNotification.id);

    // 2. Testar notifica√ß√£o de mudan√ßa de saldo
    console.log('\n2. Criando notifica√ß√£o de mudan√ßa de saldo...');
    const balanceNotification = await notificationService.createTokenBalanceChangeNotification(
      100.0,  // saldo anterior
      150.0,  // saldo novo
      'AZE',  // s√≠mbolo do token
      '0x1234567890abcdef1234567890abcdef12345678' // endere√ßo da carteira
    );
    console.log('‚úÖ Notifica√ß√£o de saldo criada:', balanceNotification.id);

    // 3. Listar todas as notifica√ß√µes
    console.log('\n3. Listando todas as notifica√ß√µes...');
    const allNotifications = await notificationService.getActiveNotifications();
    console.log(`üìã Total de notifica√ß√µes: ${allNotifications.length}`);
    
    allNotifications.forEach((notification, index) => {
      console.log(`   ${index + 1}. ${notification.title} (${notification.isRead ? 'Lida' : 'N√£o lida'})`);
    });

    // 4. Testar contagem de n√£o lidas
    console.log('\n4. Contando notifica√ß√µes n√£o lidas...');
    const unreadCount = await notificationService.getUnreadCount();
    console.log(`üìä Notifica√ß√µes n√£o lidas: ${unreadCount}`);

    // 5. Marcar uma como lida
    if (allNotifications.length > 0) {
      console.log('\n5. Marcando primeira notifica√ß√£o como lida...');
      const firstNotification = allNotifications[0];
      const updatedNotification = await notificationService.markAsRead(firstNotification.id);
      console.log('‚úÖ Notifica√ß√£o marcada como lida:', updatedNotification.id);
    }

    // 6. Verificar contagem atualizada
    console.log('\n6. Verificando contagem atualizada...');
    const updatedUnreadCount = await notificationService.getUnreadCount();
    console.log(`üìä Notifica√ß√µes n√£o lidas ap√≥s marcar como lida: ${updatedUnreadCount}`);

    console.log('\nüéâ Teste conclu√≠do com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar teste
testNotifications();

