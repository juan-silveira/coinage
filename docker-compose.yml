version: '3.8'

services:
  # Backend API
  backend:
    build: ./backend
    container_name: coinage_backend
    ports:
      - "8800:8800"
    environment:
      - NODE_ENV=production
      - PORT=8800
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=coinage_db
      - DB_USER=coinage_user
      - DB_PASSWORD=coinage_password
      - DATABASE_URL=postgresql://coinage_user:coinage_password@postgres:5432/coinage_db?sslmode=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=coinage_user
      - RABBITMQ_PASSWORD=coinage_password
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=coinage_access_key
      - MINIO_SECRET_KEY=coinage_secret_key
      - DEFAULT_ADMIN_EMAIL=ivan.alberton@navi.inf.br
      - DEFAULT_ADMIN_PASSWORD=N@vi@2025
      - JWT_SECRET=1dbe2489ad1e57530b103d71d7007ad34e17a3239a90c0cfa9007cbcab6859f75c9d2cd12f08a95a9c23428466e1e6f25c5c33cd818889d7c63d5eedf4c88f50
      - TESTNET_RPC_URL=https://rpc-testnet.azore.technology
      - TESTNET_CHAIN_ID=88001
      - MAINNET_RPC_URL=https://rpc.azore.technology
      - MAINNET_CHAIN_ID=88000
      - DEFAULT_NETWORK=mainnet
      - MAINNET_EXPLORER_URL=https://azorescan.com/api
      - TESTNET_EXPLORER_URL=https://floripa.azorescan.com/api
      - TOKEN_ABI=${TOKEN_ABI}
      - STAKE_ABI=${STAKE_ABI}
    networks:
      - coinage_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: coinage_postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=coinage_db
      - POSTGRES_USER=coinage_user
      - POSTGRES_PASSWORD=coinage_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - coinage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coinage_user -d coinage_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: coinage_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - coinage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: coinage_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=coinage_user
      - RABBITMQ_DEFAULT_PASS=coinage_password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "15672:15672"  # Management UI
    networks:
      - coinage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: coinage_minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=coinage_access_key
      - MINIO_ROOT_PASSWORD=coinage_secret_key
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    networks:
      - coinage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  minio_data:
    driver: local

networks:
  coinage_network:
    driver: bridge 